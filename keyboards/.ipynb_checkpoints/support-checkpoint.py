from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes,
    CallbackQueryHandler
)

from db import get_choice, is_agreement_accepted
from keyboards.main_menu import get_main_menu
from text_replies import *

import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from env import *

ADMIN_ID = ADMIN_ID_SUPPORT


# –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏
async def open_support_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="write_support")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    await query.message.reply_text(
        "üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=keyboard
    )


# –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def write_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["state"] = "awaiting_support_message"

    await query.message.reply_text(
        "‚úâÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ—ë –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:"
    )


# –ü—Ä–∏—ë–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–µ—Ä–µ–∑ message_router)
async def receive_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("state") != "awaiting_support_message":
        return

    context.user_data.pop("state", None)

    user = update.effective_user
    text = update.message.text

    if not text:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    user_link = (
        f"https://t.me/{user.username}" if user.username
        else f"[–ü—Ä–æ—Ñ–∏–ª—å](tg://user?id={user.id})"
    )

    await update.message.reply_text(
        "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
    )

    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=(
            f"üÜò –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n"
            f"üë§ –ò–º—è: {user.first_name}\n"
            f"üîó Telegram: {user_link}\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {text}"
        ),
        parse_mode="Markdown"
    )


# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    user_first_name = update.effective_user.first_name

    if not is_agreement_accepted(user_id):
        await query.message.reply_text(declaration_if_not_excepted)
        return

    user_choice = get_choice(user_id)
    reply_markup = get_main_menu(user_choice, user_id)

    await query.message.reply_text(
        text_1_greating.format(user_first_name=user_first_name) +
        f"\nuser_id = {user_id}\nuser_choice = {user_choice}",
        reply_markup=reply_markup
    )


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_support_handlers_ptb(app):
    app.add_handler(CallbackQueryHandler(open_support_menu, pattern="^support$"))
    app.add_handler(CallbackQueryHandler(write_support, pattern="^write_support$"))
    app.add_handler(CallbackQueryHandler(back_to_main_menu, pattern="^back_to_main$"))
