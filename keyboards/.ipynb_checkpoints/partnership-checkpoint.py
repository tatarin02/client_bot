from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes,
    CallbackQueryHandler
)

from db import get_choice, is_agreement_accepted
from keyboards.main_menu import get_main_menu
from text_replies import *

import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from env import *

ADMIN_ID = ADMIN_ID_PARTNERSHIP  # Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–≥–æ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback
async def open_partnership_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì© –Ø —Ö–æ—á—É —Å—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º", callback_data="become_partner")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    await query.message.reply_text(
        "ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º.",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def become_partner(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["state"] = "awaiting_partner_message"

    await query.message.reply_text(
        "‚úâÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å):"
    )


# –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–µ—Ä–µ–∑ message_router)
async def receive_partner_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("state") != "awaiting_partner_message":
        return

    context.user_data.pop("state", None)

    user = update.effective_user
    text = update.message.text

    user_link = (
        f"https://t.me/{user.username}" if user.username
        else f"[–ü—Ä–æ—Ñ–∏–ª—å](tg://user?id={user.id})"
    )

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
    )

    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=(
            f"üìû –ù–æ–≤—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä:\n"
            f"üë§ –ò–º—è: {user.first_name}\n"
            f"üîó Telegram: {user_link}\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {text}"
        ),
        parse_mode="Markdown"
    )


# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    user_first_name = update.effective_user.first_name

    if not is_agreement_accepted(user_id):
        await query.message.reply_text(declaration_if_not_excepted)
        return

    user_choice = get_choice(user_id)
    reply_markup = get_main_menu(user_choice, user_id)

    await query.message.reply_text(
        text_1_greating.format(user_first_name=user_first_name) +
        f"\nuser_id = {user_id}\nuser_choice = {user_choice}",
        reply_markup=reply_markup
    )


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_partnership_handlers_ptb(app):
    app.add_handler(CallbackQueryHandler(open_partnership_menu, pattern="^partnership$"))
    app.add_handler(CallbackQueryHandler(become_partner, pattern="^become_partner$"))
    app.add_handler(CallbackQueryHandler(back_to_main_menu, pattern="^back_to_main$"))
