from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ContextTypes, CallbackQueryHandler
from datetime import datetime, timedelta
from db import (
    has_used_trial,
    mark_trial_used,
    save_choice,
    save_mock_payment,
    get_and_mark_payment_as_used
)
from outline.outline_script import create_outline_key, generate_qr_image

# –¢–∞—Ä–∏—Ñ—ã
TARIFFS = {
    "monthly": {"days": 30, "price": "99‚ÇΩ"},
    "3months": {"days": 90, "price": "249‚ÇΩ"},
    "6months": {"days": 180, "price": "489‚ÇΩ"},
    "12months": {"days": 365, "price": "949‚ÇΩ"},
}


# –ü–æ–∫–∞–∑ —Ç–∞—Ä–∏—Ñ–æ–≤
async def show_tariffs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    try: await query.answer()
    except: pass

    text = (
        "<b>üì¶ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã:</b>\n\n"
        "üìù <b>–ü—Ä–æ–±–Ω—ã–π (3 –¥–Ω—è)</b>\n‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n\n"
        "üìÖ <b>1 –º–µ—Å—è—Ü</b>\n‚Ä¢ 99‚ÇΩ\n\n"
        "üì¶ <b>3 –º–µ—Å—è—Ü–∞</b>\n‚Ä¢ 249‚ÇΩ\n\n"
        "üíº <b>6 –º–µ—Å—è—Ü–µ–≤</b>\n‚Ä¢ 489‚ÇΩ\n\n"
        "üéØ <b>12 –º–µ—Å—è—Ü–µ–≤</b>\n‚Ä¢ 949‚ÇΩ"
    )

    buttons = []
    if not has_used_trial(user_id):
        buttons.append([InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å üìù –ü—Ä–æ–±–Ω—ã–π", callback_data="select_plan_trial")])

    buttons += [
        [InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å üìÖ 1 –º–µ—Å—è—Ü", callback_data="select_plan_monthly")],
        [InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å üì¶ 3 –º–µ—Å—è—Ü–∞", callback_data="select_plan_3months")],
        [InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å üíº 6 –º–µ—Å—è—Ü–µ–≤", callback_data="select_plan_6months")],
        [InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å üéØ 12 –º–µ—Å—è—Ü–µ–≤", callback_data="select_plan_12months")],
        [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]

    await query.message.edit_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(buttons))


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω –æ–ø–ª–∞—Ç—ã
async def send_payment_menu(update, context, label, price, plan_key):
    query = update.callback_query
    user_id = query.from_user.id
    try: await query.answer()
    except: pass

    save_choice(user_id, plan_key)

    text = f"<b>üßæ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: {label}</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    buttons = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{plan_key}")],
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ / –ö–ª—é—á", callback_data=f"check_payment_{plan_key}")],
        [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    await query.message.edit_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(buttons))


# –í—ã–±–æ—Ä –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
async def select_plan_monthly(update, context): await send_payment_menu(update, context, "1 –º–µ—Å—è—Ü", "99‚ÇΩ", "monthly")
async def select_plan_3months(update, context): await send_payment_menu(update, context, "3 –º–µ—Å—è—Ü–∞", "249‚ÇΩ", "3months")
async def select_plan_6months(update, context): await send_payment_menu(update, context, "6 –º–µ—Å—è—Ü–µ–≤", "489‚ÇΩ", "6months")
async def select_plan_12months(update, context): await send_payment_menu(update, context, "12 –º–µ—Å—è—Ü–µ–≤", "949‚ÇΩ", "12months")


# –ü—Ä–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ
async def select_trial_tariff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    try: await query.answer()
    except: pass

    if has_used_trial(user_id):
        await query.message.reply_text("‚ùå –¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ.")
        return

    save_choice(user_id, "trial")
    mark_trial_used(user_id)

    key = create_outline_key(user_id=user_id, days_valid=3, max_devices=3)
    if not key:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    qr_path = generate_qr_image(key["accessUrl"])
    expires_at = (datetime.utcnow() + timedelta(days=3)).strftime('%d.%m.%Y %H:%M')
    caption = (
        f"<b>üéâ –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n"
        f"<b>üîó –°—Å—ã–ª–∫–∞:</b> {key['accessUrl']}\n"
        f"<b>‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {expires_at}"
    )

    if qr_path:
        await query.message.reply_photo(photo=InputFile(qr_path), caption=caption, parse_mode="HTML")
    else:
        await query.message.reply_text(caption, parse_mode="HTML")

    await send_app_links(update)
    await query.message.reply_text("üîô –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]))


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –∏ –≤—ã–¥–∞—á–∞ –∫–ª—é—á–∞
async def check_payment_and_send_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    plan_key = query.data.replace("check_payment_", "")

    try: await query.answer()
    except: pass

    # –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –æ–ø–ª–∞—Ç—É
    payment = get_and_mark_payment_as_used(user_id, plan_key)
    if not payment:
        await query.message.reply_text("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.")
        return

    days = TARIFFS.get(plan_key, {}).get("days", 30)
    key = create_outline_key(user_id=user_id, days_valid=days, max_devices=3)

    if not key:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    qr_path = generate_qr_image(key["accessUrl"])
    expires_at = (datetime.utcnow() + timedelta(days=days)).strftime('%d.%m.%Y %H:%M')
    caption = (
        f"<b>‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n"
        f"<b>üîó –°—Å—ã–ª–∫–∞:</b> {key['accessUrl']}\n"
        f"<b>‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {expires_at}"
    )

    if qr_path:
        await query.message.reply_photo(photo=InputFile(qr_path), caption=caption, parse_mode="HTML")
    else:
        await query.message.reply_text(caption, parse_mode="HTML")

    await send_app_links(update)
    await query.message.reply_text("üîô –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]))


# –ó–∞–≥–ª—É—à–∫–∞ –æ–ø–ª–∞—Ç—ã
async def show_payment_placeholder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    plan_key = query.data.replace("pay_", "")

    try:
        await query.answer()
    except:
        pass

    save_mock_payment(user_id, plan_key)

    await query.message.reply_text("üí≥ <b>–¢—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å –æ–ø–ª–∞—Ç—ã</b>\n–û–ø–ª–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å.", parse_mode="HTML")


# –°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def send_app_links(update: Update):
    await update.callback_query.message.reply_text(
        "<b>–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–∞–º:</b>\n\n"
        "üì± <b>iPhone</b>:\nhttps://apps.apple.com/ru/app/outline-app/id1356177741?l=en-GB\n\n"
        "ü§ñ <b>Android</b>:\nhttps://play.google.com/store/apps/details?id=org.outline.android.client\n\n"
        "üíª <b>Mac OS</b>:\nhttps://itunes.apple.com/us/app/outline-app/id1356178125\n\n"
        "ü™ü <b>Windows</b>:\nhttps://s3.amazonaws.com/outline-releases/client/windows/stable/Outline-Client.exe\n\n"
        "‚öôÔ∏è <b>Linux</b>:\nhttps://s3.amazonaws.com/outline-releases/client/linux/stable/Outline-Client.AppImage",
        parse_mode="HTML"
    )


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_tariff_handlers(app):
    app.add_handler(CallbackQueryHandler(show_tariffs, pattern=r"^tariff_plan$"))
    app.add_handler(CallbackQueryHandler(select_trial_tariff, pattern=r"^select_plan_trial$"))
    app.add_handler(CallbackQueryHandler(select_plan_monthly, pattern=r"^select_plan_monthly$"))
    app.add_handler(CallbackQueryHandler(select_plan_3months, pattern=r"^select_plan_3months$"))
    app.add_handler(CallbackQueryHandler(select_plan_6months, pattern=r"^select_plan_6months$"))
    app.add_handler(CallbackQueryHandler(select_plan_12months, pattern=r"^select_plan_12months$"))
    app.add_handler(CallbackQueryHandler(show_payment_placeholder, pattern=r"^pay_"))
    app.add_handler(CallbackQueryHandler(check_payment_and_send_key, pattern=r"^check_payment_"))
